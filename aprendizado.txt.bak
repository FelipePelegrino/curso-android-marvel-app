-> O que estou aprendendo de novo/reforçando melhor com o curso?

	• Novidade e utilização do detekt (ferramenta de analise estatica de codigo)
	
	• Modularização do app, quais os motivos?
		- Build mais performático (só builda os arquivos do modulo alterado)
		- Estrutura e facilitação na organização do código (encaixa muito bem com Clean Architecture)
		- Como trazer as dependencias de um modulo para outro
		
	• Utilização do httplogging para apresentar os dados no log apenas quando for debug
	
	• Melhor utilização do interceptor para definir as chaves de api e url base
	
	• Uma das formas segures de armazenar apiKeys no android ->
		- apikey.properties
		- BuildConfig
		
	• Utilização consciente do principio L do soLid, principio da substituição por interface (Liskov)
		- utilização através da clean, definindo os métodos de acesso a dados remoto, e a api volátil implementa essas regras
		- Criando interfaces para definir os métodos de acesso a dados remoto/local na camada core, e implementando com os frameworks volateis na camada app
		
	• Como utilizar o hilt para:
		- Prover dependencias de classes que "não são minhas" | Provide | Object
		- Prover dependencias de interfaces que são minhas | Binds | Interface
		
	• Use cases:
		- Faz toda a conversão/ponte entre camada de dados e camada de UI
		- Corresponde a somente um caso de uso, um unico fluxo, uma unica ação
	
	• Configuração de um Paging3 com Clean Architecutre (UseCase + Interface sobre repository/datasource + flow)
	
	• Utilização de Paging com Footer/Header observando o LoadState para implementar loading/error states
	
	• Testes unitários:
		- Como testar com o scopo de coroutines
		- Como criar um module para testes e fornecer através de uma classe através de @Rule, funções em comuns para todos os testes (Como a manipulação de coroutines)
		- Como o mockito funciona
			♦ @Mock funciona apenas para interface
			♦ Para instanciar, é precisso o Runner do mockito anotado na classe de teste com @RunWith(MockitoJUnitRunner::class)
			♦ Ou se o Runner for outro como por exemplo o JUnitRunner, na função anotada com @Before, devo utilizar o código MockitoAnotations.initMock(this) para ela identificar o @Mock e instanciar
		- Definir retorno de funções, comportamentos dos mocks para manipular os testes
		- Como testar a implementação de Paging3
		- Como mockar adequadamente
		- Por que é importante uma boa arquitetura e a utilização de interfaces bem definidas no projeto
		
	• BuildTypes
		- Debug: facilitação e rapidez no desenvolvimento, compilação rapida, testes rápidos
		- Staging: simulação do app da loja, habilitando configurações de ofuscação e redução de código, versão disponibilizadas para QA
		- Release: configurações de ofuscação, redução, habilitadas, versão para loja
		
	• Ofuscação, redução de código, utilização do proguard-rules, R8
	
	• Funcionamento de uma esteira de CI/CD
		- Por que utilizar? Melhora a qualidade do código, uma vez que o Lint e detekt irão analisar o código a cada push/Pr configurado na CI, assim como realizará todos os testes unitários e instrumentados
		- Permite a geração de versões para o próprio bitrise ou integrado a firebase, assim como permite gerar versão direto na loja
		- Ou seja, garante qualidade, segurança, agilidade e otimização no processo de desenvolvimento
		
	• Como bloquear uma branch para apenas aceitar Pull Request, garantindo sempre o code review em branchs críticas como develop, staging, master
		- Require a pull request before merging
		- Require status check to pass before merging (serve para integrações com servidores de CI, só libera o merging após o build ser finalizado com sucesso) 
		
	• Como configurar um arquivo de keys no bitrise
		- Adicionar step de script, na qual criara um apikeys.properties na rais do projeto, recebendo as variáveis do secrets no bitrise
		- Os secretes tem que ser passado o valor entre "" pois o gradle precisará ler dessa forma, com a opção "Replace variable in input"
		
	• Firebase
		- Cada app é um buildVariant
			- Criar os app de acordo com as buildVariant, no final, baixar o arquivo google-services.json que contém as infos dos projetos criados no firebase e colocar na raiz do módulo app no meu projeto android studio
		- Firebase CLI
			- firebase login
			- firebase ci (para linkar com o ci do bitrise)
			- ao fazer o login com firebase login:ci ele já me devolve o firebase token para o servidor de CI
			- app id está presente na Configurações do Projeto
			
	• Espresso | Testes de UI
		- Testes automatizados de alta fidelidade (rápida, confiavel e repetitiva)
		- Documentaão para testes instrumentizados com hilt: https://developer.android.com/training/dependency-injection/hilt-testing#launchfragment
			• Artigo sobre isso: https://medium.com/android-dev-br/criando-um-ambiente-de-testes-com-espresso-hilt-e-navigation-b0636427f6c1
		- ATENÇÃO ao realizar testes integrados, pois as threads em background podem não retornar valor a thread main, e o espresso finaliza o testes dando success ou failure
		- Idling Resources: usado quando precisamos esperar uma requisição (geralmente sem mock), ou mesmo um toast, modal que precisamos esperar para aparecer na tela
		- Utilização de qualifiers para definir qual module será usado em uma injeção de dependencias (exemplo usado BASE URL)
		- Como instruir o hilt a desinstalar o modulo de produção e adicionar o modulo de teste nos testes
		- Como MockWebServer é em localhost, precisamos configurar o arquivo network security para permitir requests http apenas no dominio localhost
		
	• Android Test Orcherstrator
		- Isola cada execução de teste, evitando efeitos colaterais de testes já realizados
		
	• Mock Web Server
		- Basicamente, definimos o baseUrl da nossa api como localhost:8080, pois o MockWebServer, starta um servidor nesse endereço, dessa forma, todo nosso código funcionará, fazendo requisições nesse server, porém eu manipulo o response, header, etc para facilitar os testes
		- Utilizado para mockar uma api (Roda no localhost)
		- Copiamos e colamos uma resposta real da response para criar casos de testes fidedignos.
		- Pode simular erro 500 | Verificar endpoint | Headers | etc
		
	• DetailFeature
		- shared transition element
		- como abstrair bibliotecas externas para garantir a boa manutenabilidade caso a lib seja descontinuada
		- typealias para isolar um tipo de variavel (como uma funçao  (num: Int, type: String) -> Int )
		- requisição async com coroutines
		- utilização de pair
		- refatoração do coroutinesModules de D.I para quando for testar as chamadas assincronas no unitTests, mockar o dispatchers para thread de tests
			• pois caso contrário, os testes iam começar rodando em thread de testes, porém ao fazer a chamada assincrona, caso se eu utiliza-se Dispatchers.IO diretamente, ele ia mudar a thread para IO, perdendo referencia a thread de testes e impedindo de fazer as asserções corretamente.
			• injetando dependencias para os dispatchers, é possível mockar na classe de testes o bind que prove a thread io para prover thread de testes apenas nesse cenário de testes, garantindo assim a execução assincrona na thread de testes porém, garantindo a fidelidade das asserts.
		- testes com liveData
			• instantTaskExecutorRule para execução dos testes com liveData
			• mock de um observable para ele escutar todas as alterações no liveData real e poder fazer asserções mais simples e com menas linhas de código utilizando por exemplo: 
				verify(uiStateObserver).onChanged(isA<DetailViewModel.UiState.Success>())
				
	• Implementação de UiActionStateLiveData, uma técnica para isolar casos de uso no viewModel, em arquivos separados, para melhor organização do código
		- Map Actions and UiState
	
	• Conversão de flow<PagingData> para liveData<PagingData>
	• Uso do annotation @VisibleForTest
	• Uso de inline
		- deixa de criar um objeto na memória para representar a função
		- passa a copiar o código da função lambda, e copia para a linha executável, evitando um crescimento na memória do app
		
	• Uso do RemoteMediator